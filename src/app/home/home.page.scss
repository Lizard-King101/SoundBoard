//
//  MEDIA QUERIES
//––––––––––––––––––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
    xs: 576px,
    sm: 768px,
    md: 992px,
    lg: 1200px
  );
  
  
  //
  //  RESPOND ABOVE
  //––––––––––––––––––––––––––––––––––––––––––––––––––
  
  // @include respond-above(sm) {}
  @mixin respond-above($breakpoint) {
  
    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
  
      // Get the breakpoint value.
      $breakpoint-value: map-get($breakpoints, $breakpoint);
  
      // Write the media query.
      @media (min-width: $breakpoint-value) {
          @content;
      }
    
    // If the breakpoint doesn't exist in the map.
    } @else {
  
      // Log a warning.
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
  }
  
  
  //
  //  RESPOND BELOW
  //––––––––––––––––––––––––––––––––––––––––––––––––––
  
  // @include respond-below(sm) {}
  @mixin respond-below($breakpoint) {
  
    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
  
      // Get the breakpoint value.
      $breakpoint-value: map-get($breakpoints, $breakpoint);
  
      // Write the media query.
      @media (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    
    // If the breakpoint doesn't exist in the map.
    } @else {
  
      // Log a warning.
      @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
  }
  
  
  //
  //  RESPOND BETWEEN
  //––––––––––––––––––––––––––––––––––––––––––––––––––
  
  // @include respond-between(sm, md) {}
  @mixin respond-between($lower, $upper) {
  
    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
  
      // Get the lower and upper breakpoints.
      $lower-breakpoint: map-get($breakpoints, $lower);
      $upper-breakpoint: map-get($breakpoints, $upper);
  
      // Write the media query.
      @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
        @content;
      }
    
    // If one or both of the breakpoints don't exist.
    } @else {
  
      // If lower breakpoint is invalid.
      @if (map-has-key($breakpoints, $lower) == false) {
  
        // Log a warning.
        @warn 'Your lower breakpoint was invalid: #{$lower}.';
      }
  
      // If upper breakpoint is invalid.
      @if (map-has-key($breakpoints, $upper) == false) {
  
        // Log a warning.
        @warn 'Your upper breakpoint was invalid: #{$upper}.';
      }
    }
  }



:host{
    display: flex;
    flex-direction: column;
    height: 100vh;

    .container{
        display: flex;
        flex-direction: column;
        .jumbotron{
            margin-bottom: 1rem;
            position: relative;
            padding: 2rem 2rem;
            border-radius: 10px;
            overflow: hidden;
            input{
                position: absolute;
                bottom: 2px;
                left: 5px;
                width: calc(100% - 10px);
            }
            span.playing {
                display: block;
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
                width: 25%;
                z-index: 0;
                background-color: rgba(78, 191, 0, 0.5);
            }

            .content{
                position: relative;
                z-index: 1;
            }
        }
    }
    .container-fluid{
        flex: 1;
        position: relative;
        overflow: hidden auto;
        border-radius: 15px;
        border: 1px solid
        rgb(230, 230, 230);
        margin: 0 1rem 15px 1rem;
        width: calc(100% - 2rem);
        z-index: 100;
        padding: 0;

        div.buttons{
            padding: 1rem;
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            overflow: auto;
            height: 100%;

            span.sound-button{
                display: flex;
                flex-direction: column;
                
                position: relative;

                @include respond-above(lg) {
                    width: calc(100% / 6);
                }

                @include respond-between( md, lg) {
                    width: calc(100% / 5);
                }

                @include respond-between( sm, md) {
                    width: calc(100% / 4);
                }

                @include respond-between( xs, sm) {
                    width: calc(100% / 3);
                }

                @include respond-below( xs) {
                    width: calc(100% / 2);
                }

                a.delete{
                    position: absolute;
                    width: 30px;
                    height: 30px;
                    justify-content: center;
                    display: flex;
                    align-items: center;
                    font-weight: bold;
                    cursor: pointer;
                }
                
                a.play{
                    flex: 1;
                    display: flex;
                    padding: 5px;
                    cursor: pointer;

                    span{
                        display: block;
                        width: 100%;
                        padding-bottom: calc(100% - 10px);
                        border-radius: 50%;
                        border: 5px solid
                        #000262;
                        box-shadow: inset 10px 10px 50px -10px#65f1ff;
                        background: linear-gradient(312deg,rgb(9, 39, 121) 44%,rgb(0, 212, 255) 100%);
                    }
                }
    
                h5{
                    height: 48px;
                    text-align: center;
                }
            }
        }

        span.drag{
            flex: 1;
            position: absolute;
            background-color:
            rgba(0, 0, 0, 0.2);
            opacity: 0;
            transition: opacity 0.5s linear;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: -1;

            &.showing{
                opacity: 1;
                transition: opacity .5s linear;
            }
        }
    }
}
